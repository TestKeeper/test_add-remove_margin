import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ __dirname –≤ ES-–º–æ–¥—É–ª—è—Ö:
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const TOKEN_CACHE_PATH = path.resolve(__dirname, '../../.token_cache.json');
const fetch = (...args) => import('node-fetch').then(({ default: fetch }) => fetch(...args));

/**
 * –ü–æ–ª—É—á–∞–µ—Ç refreshToken –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ API, –µ—Å–ª–∏ –Ω–µ—Ç –∫–µ—à–∞
 * @param {string} username
 * @returns {Promise<string>}
 */
export async function getValidRefreshToken(username) {
  try {
    const cached = await readTokenFromFile();
    if (cached?.username === username && cached?.refreshToken) {
      console.log('üóÉÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π refreshToken –∏–∑ –∫–µ—à–∞');
      return cached.refreshToken;
    }
  } catch {
    // –∫–µ—à–∞ –Ω–µ—Ç ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  }

  console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π refreshToken —á–µ—Ä–µ–∑ API...');
  const refreshToken = await fetchRefreshToken(username);
  await saveTokenToFile({ username, refreshToken });
  return refreshToken;
}

async function fetchRefreshToken(username, timeoutMs = 10000) {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), timeoutMs);

  try {
    const response = await fetch('https://api.upscale.stormtrade.dev/admin/auth', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username }),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!response.ok) throw new Error(`–°—Ç–∞—Ç—É—Å: ${response.status}`);
    const data = await response.json();
    if (!data.refreshToken) throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç refreshToken');

    return data.refreshToken;
  } catch (err) {
    clearTimeout(timeoutId);
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–æ–∫–µ–Ω–∞: ${err.message}`);
  }
}

async function readTokenFromFile() {
  const raw = await fs.readFile(TOKEN_CACHE_PATH, 'utf-8');
  return JSON.parse(raw);
}

async function saveTokenToFile(data) {
  await fs.writeFile(TOKEN_CACHE_PATH, JSON.stringify(data, null, 2), 'utf-8');
}
