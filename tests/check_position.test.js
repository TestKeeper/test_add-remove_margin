import { test, expect } from '@playwright/test';
import { getValidRefreshToken } from './utils/tokenManager.js';


const tradingPairs = [
  'ETH_USD', 'BTC_USD', 'TON_USD', 'XRP_USD', 'SOL_USD',
  'LINK_USD', 'AVAX_USD', 'ADA_USD', 'DOGE_USD', 'BNB_USD'
];
const directions = ['Short', 'Long'];

// –õ–æ–≥–≥–µ—Ä
function logStep(msg) {
  console.log(`[${new Date().toISOString()}] ${msg}`);
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç-–∫–µ–π—Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ, –±–µ–∑ describe
for (const pair of tradingPairs) {
  for (const direction of directions) {
    test(`üîÅ ${pair}: ${direction} –ø–æ–∑–∏—Ü–∏—è: –æ—Ç–∫—Ä—ã—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä–∂—É –∏ –∑–∞–∫—Ä—ã—Ç—å (anti-flap v2)`, async ({ page }) => {
      test.setTimeout(120000);
      const username = 'nibel123';
      logStep('üóÉÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π refreshToken –∏–∑ –∫–µ—à–∞');
      const refreshToken = await getValidRefreshToken(username);

      // 1. –õ–æ–≥–∏–Ω–∏–º—Å—è
      logStep('–û—Ç–∫—Ä—ã–≤–∞—é debug-—Å—Ç—Ä–∞–Ω–∏—Ü—É');
      await page.goto(`https://app.upscale.stormtrade.dev/debug/${refreshToken}`, { waitUntil: 'domcontentloaded', timeout: 60000 });
      await expect(page).toHaveURL(/\/accounts/, { timeout: 15000 });

      // 2. –¢–æ—Ä–≥–æ–≤–ª—è
      logStep('–ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ—Ä–≥–æ–≤–ª–∏');
      await page.goto(`https://app.upscale.stormtrade.dev/trade/${pair}?collateral=USD&tab=positions`, { waitUntil: 'domcontentloaded', timeout: 60000 });

      // 3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
      await page.reload({ waitUntil: 'domcontentloaded' });
      await page.waitForTimeout(1200);

      // 4. –ü–æ–∑–∏—Ü–∏—è - –æ—á–∏—Å—Ç–∫–∞
      const ticker = pair.split('_')[0];
      const posRow = page.locator('tr', { hasText: ticker }).first();
      if (direction === 'Long') {
        logStep('–ñ–¥—É, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –∏—Å—á–µ–∑–ª–∞ –ø–µ—Ä–µ–¥ Long');
        try {
          await expect(posRow).not.toBeVisible({ timeout: 8000 });
        } catch {
          logStep('–ü–æ–∑–∏—Ü–∏—è –≤–∏–¥–Ω–∞, –¥–µ–ª–∞—é reload');
          await page.reload({ waitUntil: 'domcontentloaded' });
        }
      }

      // 5. –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      logStep(`–ö–ª–∏–∫–∞—é –ø–æ –≤–∫–ª–∞–¥–∫–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${direction}`);
      const directionTab = page.locator('div', { hasText: new RegExp(`^${direction}$`, 'i') }).first();
      await directionTab.click();
      await page.waitForTimeout(600); // –ø–æ–¥–æ–∂–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏—é

      logStep('–í–≤–æ–∂—É amount');
      const amountInput = page.locator('[data-testid="order-creation-card-asset-amount-input"]');
      await expect(amountInput).toBeVisible({ timeout: 7000 });
      await amountInput.fill('1');

      logStep('–í–≤–æ–∂—É –ø–ª–µ—á–æ');
      const leverageInput = page.locator('input[name="leverage"]:not([type="hidden"])');
      await expect(leverageInput).toBeVisible({ timeout: 7000 });
      await leverageInput.fill('3');

      logStep('–ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞—é –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏');
      const openBtn = page.locator('[data-testid="open-position-button"]');
      await expect(openBtn).toBeEnabled({ timeout: 10000 });
      await openBtn.click();

      // 6. –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ (retry)
      let appeared = false;
      for (let attempt = 1; attempt <= 2; attempt++) {
        logStep(`–û–∂–∏–¥–∞—é –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        try {
          await expect(posRow).toBeVisible({ timeout: 12000 });
          appeared = true;
          break;
        } catch (e) {
          logStep('–ù–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –¥–µ–ª–∞—é reload');
          await page.reload({ waitUntil: 'domcontentloaded' });
        }
      }
      if (!appeared) throw new Error('–°—Ç—Ä–æ–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å');

      // 7. –î–µ–ª–∞–µ–º –ø–∞—É–∑—É, —á—Ç–æ–±—ã –ø–æ–∑–∏—Ü–∏—è —Ç–æ—á–Ω–æ –ø—Ä–æ–≥—Ä—É–∑–∏–ª–∞—Å—å
      await page.waitForTimeout(1000);

      // 8. –†–∞–±–æ—Ç–∞–µ–º —Å –º–æ–¥–∞–ª–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏
      logStep('–ö–ª–∏–∫–∞—é –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–∑–∏—Ü–∏–∏');
      await posRow.click();
      await page.waitForTimeout(500);

      logStep('–ñ–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏');
      const positionInfoWindow = page.locator('section.chakra-modal__content');
      await expect(positionInfoWindow).toBeVisible({ timeout: 10000 });

      // --- Add/Remove Margin ---
      const valueBeforeLocator = positionInfoWindow
        .locator('p.chakra-text.css-14es400', { hasText: '–ú–∞—Ä–∂–∞' })
        .locator('..')
        .locator('p.chakra-text.css-1ngrxjw').first();

      const valueBefore = parseFloat((await valueBeforeLocator.textContent()).replace(/[^\d.]/g, ''));
      logStep(`–ú–∞—Ä–∂–∞ –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${valueBefore}`);

      logStep('–ö–ª–∏–∫–∞—é "–î–û–ë–ê–í–ò–¢–¨"');
      await positionInfoWindow.locator('button:has-text("–î–û–ë–ê–í–ò–¢–¨")').click();
      await page.waitForTimeout(300);

      logStep('–ñ–¥—É input –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∂–∏');
      const inputAmount = positionInfoWindow.locator('input[name="value"]:visible').first();
      await expect(inputAmount).toBeVisible({ timeout: 7000 });
      await inputAmount.fill('1');

      logStep('–ö–ª–∏–∫–∞—é "–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∂—É"');
      await positionInfoWindow.locator('button', { hasText: '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∂—É' }).click();
      await page.waitForTimeout(300);

      logStep('–ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –º–∞—Ä–∂–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å');
      await expect.poll(async () => {
        const txt = await valueBeforeLocator.textContent();
        return parseFloat(txt.replace(/[^\d.]/g, ''));
      }, { timeout: 10000 }).toBeCloseTo(valueBefore + 1, 2);

      logStep('–ö–ª–∏–∫–∞—é "–£–ú–ï–ù–¨–®–ò–¢–¨"');
      await positionInfoWindow.locator('button:has-text("–£–ú–ï–ù–¨–®–ò–¢–¨")').click();
      await page.waitForTimeout(300);

      logStep('–ñ–¥—É input –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Ä–∂–∏');
      const removeInput = positionInfoWindow.locator('input[name="amount"]:visible').first();
      await expect(removeInput).toBeVisible({ timeout: 7000 });
      await removeInput.fill('1');

      logStep('–ö–ª–∏–∫–∞—é "–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Ä–∂—É"');
      await positionInfoWindow.locator('button', { hasText: '–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—Ä–∂—É' }).click();
      await page.waitForTimeout(300);

      logStep('–ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ –º–∞—Ä–∂–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å');
      await expect.poll(async () => {
        const txt = await valueBeforeLocator.textContent();
        return parseFloat(txt.replace(/[^\d.]/g, ''));
      }, { timeout: 10000 }).toBeCloseTo(valueBefore, 2);

      // --- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ---
      logStep('–ò—â—É –∏ –∫–ª–∏–∫–∞—é —Å–µ—Ä—É—é –∫–Ω–æ–ø–∫—É "–ó–ê–ö–†–´–¢–¨ –ü–û–ó–ò–¶–ò–Æ"');
      const grayCloseBtn = positionInfoWindow.locator('button', { hasText: '–ó–ê–ö–†–´–¢–¨ –ü–û–ó–ò–¶–ò–Æ', class: /gray|grey/i }).first();
      if (await grayCloseBtn.count() && await grayCloseBtn.isEnabled()) {
        await grayCloseBtn.click();
        logStep('–ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –∏ –∫–ª–∏–∫–∞—é –∫—Ä–∞—Å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ó–ê–ö–†–´–¢–¨ –ü–û–ó–ò–¶–ò–Æ"');
        const redCloseBtn = page.locator('[data-testid="close-position-modal-close-button"]');
        await expect(redCloseBtn).toBeVisible({ timeout: 8000 });
        await redCloseBtn.click();
      } else {
        // –ï—Å–ª–∏ —Å–µ—Ä–æ–π –Ω–µ—Ç ‚Äî –∏—â–µ–º —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω—É—é
        logStep('–°–µ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∫–ª–∏–∫–∞—é –∫—Ä–∞—Å–Ω—É—é');
        const redCloseBtn = page.locator('[data-testid="close-position-modal-close-button"]');
        await expect(redCloseBtn).toBeVisible({ timeout: 8000 });
        await redCloseBtn.click();
      }

      // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ ---
      let disappeared = false;
      for (let attempt = 1; attempt <= 2; attempt++) {
        logStep(`–û–∂–∏–¥–∞—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        try {
          await expect(posRow).not.toBeVisible({ timeout: 12000 });
          disappeared = true;
          break;
        } catch (err) {
          logStep('–ü–æ–∑–∏—Ü–∏—è –≤—Å—ë –µ—â—ë –Ω–∞ –º–µ—Å—Ç–µ, –¥–µ–ª–∞—é reload');
          await page.reload({ waitUntil: 'domcontentloaded' });
        }
      }
      if (!disappeared) throw new Error('–°—Ç—Ä–æ–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –∏—Å—á–µ–∑–ª–∞!');

      logStep(`‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ –ø–∞—Ä–µ ${pair} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ (${direction})`);
      await page.waitForTimeout(800);
    });
  }
}
